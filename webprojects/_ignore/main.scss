@mixin prefixed($prop, $val) {
	-webkit-#{$prop}: $val;
	-moz-#{$prop}: $val;
	-o-#{$prop}: $val;
	-khtml-#{$prop}: $val;
	-ms-#{$prop}: $val;
	#{$prop}: $val;
}

@mixin no-text-adj {
	@include prefixed(text-size-adjust, none);
}

@mixin no-extra-style {
	-webkit-appearance: none;
	-moz-appearance: none;
}

@mixin user-select($a, $b:none) {
	-webkit-touch-callout: $b;
	@include prefixed(user-select, $a);
}

@mixin box-shadow($shadows...) {
	@include prefixed(box-shadow, $shadows); 
}

@mixin text-shadow($shadows...) {
	@include prefixed(text-shadow, $shadows); 
}

@mixin border-radius($x, $evenOnWP:false) {
	@include prefixed(border-radius, $x);
}

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} { @content; }
	@-moz-keyframes #{$name} { @content; }
	@-o-keyframes #{$name} { @content; }
	@keyframes #{$name} { @content; }
}

@mixin background-gradient($angle, $color-stops...)
{
	background: nth(nth($color-stops, 1), 1);

	$len: length($color-stops);
	@if $len == 1 {
		@warn "Assuming gradient with one color a solid background"
	} @else {
		@for $i from 1 through $len {
			@if length(nth($color-stops, $i)) == 1 {
				$color-stops: set-nth($color-stops, $i, append(nth($color-stops, $i), ((100% * ($i - 1)) / ($len - 1)), space));
			}
		}

		background: -moz-linear-gradient($angle, $color-stops);
		background: -webkit-linear-gradient($angle, $color-stops);
		background: -o-linear-gradient($angle, $color-stops);
		background: -ms-linear-gradient($angle, $color-stops);
		background: linear-gradient($angle, $color-stops);
	}
}

@mixin transform($x) {
	@include prefixed(transform, $x);
}

@mixin helvetica() {
	font-family: "Helvetica Neue", HelveticaNeue, Helvetica, "Helvetica Neue LT", HelveticaNeueLT, "Helvetica Neue Pro", HelveticaNeuePro, "Helvetica Neue LT Pro", HelveticaNeueLTPro, HelveticaNeueLTPro-Roman, "Source Sans Pro", Arial, "Lucida Grande", sans-serif;
}

@mixin times() {
	font-family: "Times New Roman", Times, serif;
}

@mixin monospace() {
	font-family: Monospace, "Lucida Console";
}

@function append-strlist($list, $elem) {
	@if str-length($list) > 0 {
		$list: $list + ", ";
	}
	@return $list + $elem;
}

//	This is a complicated mixin so I'll explain:
//
//	$time is the length of the transition
//	$props is a list of properties to transition
//	$flags is an optional set of flags for each property, explaining which
//	browsers support a property, and which ones need prefixes for that
//	propery.  Each property can have the following flags:
//
//		w	The property may need the "-webkit-" prefix
//		m	The property may need the "-moz-" prefix
//		o	The property may need the "-o-" prefix
//		k	The property may need the "-khtml-" prefix
//		i	The property may need the "-ms-" prefix
//		_	The property may need all reasonable prefixes
//		W	The property is available for transitions in webkit
//		M	The property is available for transitions in gecko
//		O	The property is available for transitions in old opera
//		K	The property is available for transitions in KHTML
//		I	The property is available for transitions in Trident
//
//	If no capital-letter flag specified, the property is assumed to work for
//	transitions in all browsers (possibly with a prefix).  If one is
//	specified, then only the browsers who's capital-letter flag is specified
//	will be assumed to have the property working for transitions.
//
//	Elements of $flags are simply strings containing flags.  If $props is
//	longer than $flags, the last element of $flags will be repeated to fill
//	in the remaining space.  If $flags is of length 0, the first element will
//	default to ""
@mixin transition($time, $props, $flags:()) {
	$prefixes: ("-webkit-", "-moz-", "-o-", "-khtml-", "-ms-", "");
	$cmds: ("", "", "", "", "", "");
	$pfxFlags: ("w", "m", "o", "k", "i", "");
	$allowFlags: ("W", "M", "O", "K", "I", "WMOKI");

	@if length($flags) == 0 {
		$flags: append($flags, "");
	}

	//Parsed flags
	$reqPfx: $pfxFlags;//Just needs the right length
	$allowed: $allowFlags;//Again, just needs the right length

	@for $i from 1 through length($props) {
		//Process Flags
		@if $i <= length($flags) {
			$flagStr: nth($flags, $i);
			$pfxAll: str_index($flagStr, "_") != null;
			$limited: false;
			@for $j from 1 through length($reqPfx) {
				$pfxFlag: nth($pfxFlags, $j);
				$allowFlag: nth($allowFlags, $j);
				$reqPfx: set-nth($reqPfx, $j, $pfxAll or str_index($flagStr, $pfxFlag) != null);
				$allow: str_index($flagStr, $allowFlag) != null;
				$allowed: set-nth($allowed, $j, $allow);
				@if $allow {
					$limited: true;
				} 
			}
			
			@if not $limited {
				@for $j from 1 through length($allowed) {
					$allowed: set-nth($allowed, $j, true);
				}
			}
			$allowed: set-nth($allowed, length($allowed), true);
		}

		//Add cmd
		@for $j from 1 through length($prefixes) {
			@if nth($allowed, $j) {
				$cmds: set-nth($cmds, $j, append-strlist(nth($cmds, $j), if(nth($reqPfx, $j), nth($prefixes, $j), "") + nth($props, $i) + " " + $time));
			}
		}
	}

	@for $j from 1 through length($prefixes) {
		$cmd: nth($cmds, $j);
		@if length($cmd) != 0 {
			#{nth($prefixes, $j)}transition: #{nth($cmds, $j)};
		}
	}
}
